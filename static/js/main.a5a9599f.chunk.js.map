{"version":3,"sources":["components/SelectOptions.jsx","components/GridInfo.jsx","components/themeColor.jsx","components/ButtonLayout.jsx","components/GridLayout.jsx","App.js","serviceWorker.js","index.js"],"names":["SelectOptions","selectedColor","getSelectedColor","value","onChange","GridInfo","rows","cols","className","style","fontWeight","fontSize","ThemeackgroundColor","styled","div","ThemebuttonColor","button","ButtonLayout","state","props","this","onClick","addRow","addCol","removeRow","removeCol","id","fillAll","fillUncolored","clearGrid","backgroundColor","resetGrid","nextProps","prevState","Component","GridLayout","colorMultiple","colorBox","onMouseRelease","onMouseDown","Array","from","e","i","key","f","j","onMouseOver","onMouseUp","App","newRows","setState","newCols","alert","grid","ReactDOM","findDOMNode","myRef","current","childNodes","event","mouseReleased","mouseDown","target","React","createRef","ref","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5a9599f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SelectOptions = ({ selectedColor, getSelectedColor }) => {\r\n  return (\r\n    <select value={selectedColor} onChange={getSelectedColor}>\r\n      <option value=\"green\">green</option>\r\n      <option value=\"red\">red</option>\r\n      <option value=\"blue\">blue</option>\r\n      <option value=\"purple\">purple</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectOptions;\r\n","import React from \"react\";\r\n\r\nconst GridInfo = ({ rows, cols }) => {\r\n  return (\r\n    <div className=\"container dimension\">\r\n      <p style={{ fontWeight: 900, fontSize: 14 }}>Row Size {rows}</p>\r\n      <p style={{ fontWeight: 900, fontSize: 14 }}>Column Size {cols}</p>\r\n      <p style={{ fontWeight: 900, fontSize: 14 }}>\r\n        Total Squares {cols * rows}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridInfo;\r\n","//this is the theme color componenet, will add 6 colors with 20% each gradient animatioin.\r\n//inspired by June Pride month!\r\n\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst ThemeackgroundColor = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  color: white;\r\n  max-width: 100%;\r\n\r\n  /* Chrome, Safari, Opera */\r\n-webkit-animation-name:myfirst;\r\n-webkit-animation-duration:20s;\r\n-webkit-animation-timing-function:linear;\r\n-webkit-animation-delay:0s;\r\n-webkit-animation-iteration-count:infinite;\r\n-webkit-animation-direction:alternate;\r\n-webkit-animation-play-state:running;\r\n/* Standard syntax */\r\nanimation-name:LGBTFlagColors;\r\nanimation-duration:20s;\r\nanimation-timing-function:linear;\r\nanimation-delay:0s;\r\nanimation-iteration-count:infinite;\r\nanimation-direction:alternate;\r\nanimation-play-state:running;\r\n}\r\n\r\n\r\n/* Animation keyframe */\r\n/* Chrome, Safari, Opera */\r\n@-webkit-keyframes LGBTFlagColors\r\n{\r\n0%   {background: #FF0018; left:0px; top:0px;}\r\n20%  {background: #FFA52C; left:0px; top:0px;}\r\n40%  {background: #FFFF41; left:0px; top:0px;}\r\n60%  {background: #008018; left:0px; top:0px;}\r\n80%  {background: #0000F9; left:0px; top:0px;}\r\n100% {background: #86007D; left:0px; top:0px;}\r\n}\r\n\r\n/* Standard syntax */\r\n@keyframes LGBTFlagColors\r\n{\r\n0%   {background: #FF0018; left:0px; top:0px;}\r\n20%  {background: #FFA52C; left:0px; top:0px;}\r\n40%  {background: #FFFF41; left:0px; top:0px;}\r\n60%  {background: #008018; left:0px; top:0px;}\r\n80%  {background: #0000F9; left:0px; top:0px;}\r\n100% {background: #86007D; left:0px; top:0px;}\r\n}\r\n`;\r\n\r\nconst ThemebuttonColor = styled.button`\r\n  display: inline-flex;\r\n  height: 40px;\r\n  width: fit-content;\r\n  border: 2px solid #fff;\r\n  margin: 20px;\r\n  padding: 5px 20px;\r\n  color: #333;\r\n  background: #fff;\r\n  text-transform: uppercase;\r\n  text-decoration: none;\r\n  font-size: 0.8em;\r\n  letter-spacing: 1.5px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  overflow: hidden;\r\n\r\n  &:hover {\r\n    animation: LGBT-Flag-animation 2.5s ease-in-out infinite;\r\n    background: linear-gradient(\r\n      70deg,\r\n      #ff0018,\r\n      #ffa52c,\r\n      #ffff41,\r\n      #008018,\r\n      #0000f9,\r\n      #86007d\r\n    );\r\n    color: white;\r\n    font-weight: bold;\r\n    border-color: white;\r\n  }\r\n  /* Hover Animation (rainbow) */\r\n  @keyframes LGBT-Flag-animation {\r\n    0% {\r\n      background: linear-gradient(\r\n        70deg,\r\n        #ff0018,\r\n        #ffa52c,\r\n        #ffff41,\r\n        #008018,\r\n        #0000f9,\r\n        #86007d\r\n      );\r\n    }\r\n    20% {\r\n      background: linear-gradient(\r\n        120deg,\r\n        #ff0018,\r\n        #ffa52c,\r\n        #ffff41,\r\n        #008018,\r\n        #0000f9,\r\n        #86007d\r\n      );\r\n    }\r\n    40% {\r\n      background: linear-gradient(\r\n        150deg,\r\n        #ff0018,\r\n        #ffa52c,\r\n        #ffff41,\r\n        #008018,\r\n        #0000f9,\r\n        #86007d\r\n      );\r\n    }\r\n\r\n    60% {\r\n      background: linear-gradient(\r\n        150deg,\r\n        #ff0018,\r\n        #ffa52c,\r\n        #ffff41,\r\n        #008018,\r\n        #0000f9,\r\n        #86007d\r\n      );\r\n    }\r\n    80% {\r\n      background: linear-gradient(\r\n        170deg,\r\n        #ff0018,\r\n        #ffa52c,\r\n        #ffff41,\r\n        #008018,\r\n        #0000f9,\r\n        #86007d\r\n      );\r\n    }\r\n\r\n    100% {\r\n      background: linear-gradient(\r\n        190deg,\r\n        #ff0018,\r\n        #ffa52c,\r\n        #ffff41,\r\n        #008018,\r\n        #0000f9,\r\n        #86007d\r\n      );\r\n    }\r\n  }\r\n`;\r\n\r\nconst ThemeContentColor = styled.button`\r\n  background: blue;\r\n  width: 100%;\r\n  color: white;\r\n  margin: 0 1em;\r\n  padding: 0.25em 1em;\r\n`;\r\n\r\nexport { ThemeackgroundColor, ThemebuttonColor, ThemeContentColor };\r\n","import React, { Component } from \"react\";\r\nimport \"../css/ButtonLayout.css\";\r\nimport SelectOptions from \"./SelectOptions\";\r\nimport GridInfo from \"./GridInfo\";\r\nimport {\r\n  ThemeackgroundColor,\r\n  ThemebuttonColor,\r\n  ThemeContentColor,\r\n} from \"./themeColor\";\r\n\r\nclass ButtonLayout extends Component {\r\n  state = { rows: this.props.rows, cols: this.props.cols };\r\n\r\n  //listen for props update in app\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (\r\n      prevState.rows !== nextProps.rows ||\r\n      prevState.cols !== nextProps.cols\r\n    ) {\r\n      return {\r\n        rows: nextProps.rows,\r\n        cols: nextProps.cols,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { rows, cols } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <ThemebuttonColor\r\n          className=\"btn-sm btn-primary m-2\"\r\n          onClick={this.props.addRow}\r\n        >\r\n          Add Row\r\n        </ThemebuttonColor>\r\n        <ThemebuttonColor\r\n          className=\"btn-sm btn-primary m-2\"\r\n          onClick={this.props.addCol}\r\n        >\r\n          Add Column\r\n        </ThemebuttonColor>\r\n        <ThemebuttonColor\r\n          className=\"btn-sm btn-primary m-2\"\r\n          onClick={this.props.removeRow}\r\n        >\r\n          Remove Row\r\n        </ThemebuttonColor>\r\n        <ThemebuttonColor\r\n          className=\"btn-sm btn-primary m-1\"\r\n          onClick={this.props.removeCol}\r\n        >\r\n          Remove Column\r\n        </ThemebuttonColor>\r\n        {(rows > 0) & (cols > 0) ? (\r\n          <div className=\"grid view btn\" id=\"gv-btn\">\r\n            <ThemebuttonColor\r\n              className=\"btn-sm  m-2\"\r\n              onClick={this.props.fillAll}\r\n            >\r\n              Fill All\r\n            </ThemebuttonColor>\r\n            <ThemebuttonColor\r\n              className=\"btn-sm btn-primary m-2\"\r\n              onClick={this.props.fillUncolored}\r\n            >\r\n              Fill Uncolored\r\n            </ThemebuttonColor>\r\n            <ThemebuttonColor\r\n              className=\"btn-sm btn-primary m-2\"\r\n              onClick={this.props.clearGrid}\r\n            >\r\n              Clear\r\n            </ThemebuttonColor>\r\n          </div>\r\n        ) : null}\r\n        <ThemebuttonColor\r\n          className=\"btn-sm btn-primary m-2\"\r\n          style={{ backgroundColor: \"red\" }}\r\n          onClick={this.props.resetGrid}\r\n        >\r\n          Reset Grid\r\n        </ThemebuttonColor>\r\n        <SelectOptions\r\n          selectedColor={this.props.selectedColor}\r\n          getSelectedColor={this.props.getSelectedColor}\r\n        />\r\n        <GridInfo rows={rows} cols={cols} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonLayout;\r\n","import React from \"react\";\r\nimport \"../css/GridLayout.css\";\r\n\r\nconst GridLayout = ({\r\n  rows,\r\n  cols,\r\n  colorBox,\r\n  colorMultiple,\r\n  onMouseRelease,\r\n  onMouseDown,\r\n}) => {\r\n  return (rows > 0) & (cols > 0) ? (\r\n    <table className=\"container\" id=\"grid\">\r\n      {Array.from(Array(rows), (e, i) => {\r\n        return (\r\n          <div className=\"row\" key={i} id=\"row\">\r\n            {Array.from(Array(cols), (f, j) => {\r\n              return (\r\n                <div\r\n                  className=\"container col\"\r\n                  key={j}\r\n                  onMouseOver={(e) => colorMultiple(e)}\r\n                  onMouseDown={(e) => onMouseDown(e)}\r\n                  onMouseUp={(e) => onMouseRelease(e)}\r\n                  id=\"col\"\r\n                ></div>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </table>\r\n  ) : null;\r\n};\r\n\r\nexport default GridLayout;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ButtonLayout from \"./components/ButtonLayout\";\r\nimport GridLayout from \"./components/GridLayout\";\r\nimport {\r\n  ThemeackgroundColor,\r\n  ThemebuttonColor,\r\n  ThemeContentColor,\r\n} from \"./components/themeColor\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //state initialization\r\n    this.state = {\r\n      rows: 0,\r\n      cols: 0,\r\n      selectedColor: \"green\",\r\n      mouseReleased: true,\r\n      mouseDown: false,\r\n    };\r\n\r\n    //ref to the dom nodes to bypass native DOM methods usage\r\n    this.myRef = React.createRef();\r\n  }\r\n\r\n  //add row function\r\n  addRow = () => {\r\n    const { rows, cols } = this.state;\r\n    var newRows = rows + 1;\r\n\r\n    //if cols is 0 when rows is 1, make cols=1 to render\r\n    //else set rows to newRows\r\n    if (cols === 0) {\r\n      this.setState({\r\n        rows: newRows,\r\n        cols: cols + 1,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        rows: newRows,\r\n      });\r\n    }\r\n  };\r\n\r\n  //add column function\r\n  addCol = () => {\r\n    const { rows, cols } = this.state;\r\n    var newCols = cols + 1;\r\n\r\n    //if rows is 0 when cols is 1, make rows=1 to render\r\n    //else set cols to newCols\r\n    if (rows === 0) {\r\n      this.setState({\r\n        cols: newCols,\r\n        rows: rows + 1,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        cols: newCols,\r\n      });\r\n    }\r\n  };\r\n\r\n  //remove row function\r\n  removeRow = () => {\r\n    var newRows = this.state.rows - 1;\r\n    //if rows becomes negative, set rows to 0, else newRows\r\n    this.setState({\r\n      rows: newRows < 0 ? 0 : newRows,\r\n    });\r\n  };\r\n\r\n  //remove column function\r\n  removeCol = () => {\r\n    var newCols = this.state.cols - 1;\r\n    //if cols becomes negative, set rows to 0, else newCols\r\n    this.setState({\r\n      cols: newCols < 0 ? 0 : newCols,\r\n    });\r\n  };\r\n\r\n  resetGrid = () => {\r\n    const { rows, cols } = this.state;\r\n\r\n    //on rows=0 and cols=0, alert else set rows and cols to 0 respectively\r\n    if (rows === 0 && cols === 0) {\r\n      alert(\"you good bro\");\r\n    } else {\r\n      this.setState({\r\n        rows: 0,\r\n        cols: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  //fill all boxes with selected color\r\n  fillAll = () => {\r\n    const { rows, cols, selectedColor } = this.state;\r\n    //get all nodes by ref\r\n    const grid = ReactDOM.findDOMNode(this.myRef.current).childNodes[1]\r\n      .childNodes;\r\n\r\n    //run through all rows and cols children and change their color to blank/white\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        grid[i].childNodes[j].style.backgroundColor = selectedColor;\r\n      }\r\n    }\r\n  };\r\n\r\n  //fill all boxes not with selected color\r\n  fillUncolored = () => {\r\n    const { rows, cols, selectedColor } = this.state;\r\n    //get all nodes by ref\r\n    const grid = ReactDOM.findDOMNode(this.myRef.current).childNodes[1]\r\n      .childNodes;\r\n\r\n    //run through all rows and cols children and change their color to selectedColor\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        //check if it is blank/white\r\n        if (grid[i].childNodes[j].style.backgroundColor === \"\")\r\n          grid[i].childNodes[j].style.backgroundColor = selectedColor;\r\n      }\r\n    }\r\n  };\r\n\r\n  //clear all coloring\r\n  clearGrid = () => {\r\n    const { rows, cols } = this.state;\r\n    //get all nodes by ref\r\n    const grid = ReactDOM.findDOMNode(this.myRef.current).childNodes[1]\r\n      .childNodes;\r\n\r\n    //run through all rows and cols children and change their color to blank/white\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        grid[i].childNodes[j].style.backgroundColor = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  //on mouse up, switch the boolean to stop coloring\r\n  onMouseRelease = (event) => {\r\n    this.setState({\r\n      mouseReleased: true,\r\n      mouseDown: false,\r\n    });\r\n  };\r\n\r\n  //on mouse down, switch the boolean to start coloring\r\n  onMouseDown = (event) => {\r\n    this.setState({\r\n      mouseDown: true,\r\n      mouseReleased: false,\r\n    });\r\n    event.target.style.backgroundColor = this.state.selectedColor;\r\n  };\r\n\r\n  colorMultiple = (event) => {\r\n    //if mousedown state is true, onMouseOver will color until mouse is up\r\n    if (this.state.mouseDown === true) {\r\n      event.target.style.backgroundColor = this.state.selectedColor;\r\n    }\r\n  };\r\n\r\n  //get selected color option and set to state\r\n  getSelectedColor = (e) => {\r\n    this.setState({\r\n      selectedColor: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { rows, cols, selectedColor } = this.state;\r\n    return (\r\n      <ThemeackgroundColor className=\"container\" ref={this.myRef}>\r\n        <ButtonLayout\r\n          addRow={this.addRow}\r\n          addCol={this.addCol}\r\n          removeRow={this.removeRow}\r\n          removeCol={this.removeCol}\r\n          resetGrid={this.resetGrid}\r\n          fillAll={this.fillAll}\r\n          fillUncolored={this.fillUncolored}\r\n          clearGrid={this.clearGrid}\r\n          getSelectedColor={this.getSelectedColor}\r\n          selectedColor={selectedColor}\r\n          rows={rows}\r\n          cols={cols}\r\n        />\r\n\r\n        <GridLayout\r\n          rows={rows}\r\n          cols={cols}\r\n          colorMultiple={this.colorMultiple}\r\n          onMouseRelease={this.onMouseRelease}\r\n          onMouseDown={this.onMouseDown}\r\n        />\r\n      </ThemeackgroundColor>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}